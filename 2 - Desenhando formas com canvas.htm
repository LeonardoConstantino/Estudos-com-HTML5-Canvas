<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            outline: none;
            font-family: 'Roboto', sans-serif;
        }

        main {
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            align-content: center;
            flex-direction: column;
            gap: 12px;
        }

        canvas {
            width: 400px;
            height: 400px;
            border: solid 1px red;
        }

        .botoes{
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            width: 70vw;
            gap: 8px;
        }

        input[type="button"]{
            padding: 8px;
            min-width: 150px;
        }

        .codigo{
            overflow: auto;
        }

        h2{
            padding: 8px;
            text-align: center;
        }
    </style>
    <title>Canvas</title>
</head>

<body onload="desenha()">
    <main>
        <canvas id="tutorial" width="150" height="150"></canvas>
        <div class="botoes">
            <input type="button" value="Desenhando retângulos" onclick="desenha()">
            <input type="button" value="Desenhando caminhos" onclick="desenha2()">
            <input type="button" value="Desenhando" onclick="desenha3()">
            <input type="button" value="Linhas" onclick="desenha4()">
            <input type="button" value="Arcos" onclick="desenha5()">
            <input type="button" value="Curvas de Bézier Quadráticas" onclick="desenha6()">
            <input type="button" value="Curvas de Bézier Cúbicas" onclick="desenha7()">
            <input type="button" value="Combinando Elementos" onclick="desenha8()">
            <input type="button" value="Exemplo de Path2D" onclick="desenha9()">
        </div>

        <div class="codigo">
            <h2>Código do desenho</h2>
            <p>
                <code>
                    <pre>
                    </pre>
                </code>
            </p>
        </div>

        <script>
            const BODY = document.querySelector('body')
            let canvas = document.querySelector('#tutorial');
            const PRE = document.querySelector('pre')
            var ctx = canvas.getContext("2d");
            let largura = ctx.canvas.width
            let altura = ctx.canvas.height
            // console.log(largura)

            const desenha = () => {
                ctx.clearRect(0, 0, largura, altura)
                ctx.fillRect(25, 25, 100, 100)
                ctx.clearRect(45, 45, 60, 60)
                ctx.strokeRect(50, 50, 50, 50)
                PRE.innerHTML=`${desenha.toString().slice(8,-73)}`
            }
            const desenha2 = () => {
                ctx.clearRect(0, 0, largura, altura)
                ctx.beginPath();
                ctx.moveTo(75, 50);
                ctx.lineTo(100, 75);
                ctx.lineTo(100, 25);
                ctx.fill();
                PRE.innerHTML=`${desenha2.toString().slice(8,-73)}`
            }
            const desenha3 = () => {
                ctx.clearRect(0, 0, largura, altura)
                ctx.beginPath();
                // Círculo exterior
                ctx.arc(75, 75, 50, 0, Math.PI * 2, true);
                ctx.moveTo(110, 75);
                // Boca (sentido horário)
                ctx.arc(75, 75, 35, 0, Math.PI, false);
                ctx.moveTo(65, 65);
                // Olho esquerdo
                ctx.arc(60, 65, 5, 0, Math.PI * 2, true);
                ctx.moveTo(95, 65);
                // Olho direito
                ctx.arc(90, 65, 5, 0, Math.PI * 2, true);
                ctx.stroke();
                PRE.innerHTML=`${desenha3.toString().slice(8,-73)}`
            }
            const desenha4 = () => {
                ctx.clearRect(0, 0, largura, altura)
                // Filled triangle
                ctx.beginPath();
                ctx.moveTo(25, 25);
                ctx.lineTo(105, 25);
                ctx.lineTo(25, 105);
                ctx.fill();
                
                // Stroked triangle
                ctx.beginPath();
                ctx.moveTo(125, 125);
                ctx.lineTo(125, 45);
                ctx.lineTo(45, 125);
                ctx.closePath();
                ctx.stroke();
                PRE.innerHTML=`${desenha4.toString().slice(8,-73)}`
            }
            const desenha5 = () => {
                ctx.clearRect(0, 0, largura, altura)
                for (var i = 0; i < 4; i++) {
                    for (var j = 0; j < 3; j++) {
                        ctx.beginPath();
                        var x = 25 + j * 50; // coordenada x
                        var y = 25 + i * 50; // coordenada y
                        var radius = 20; // Raio do Arco
                        var startAngle = 0; // Ponto inicial no círculo
                        var endAngle = Math.PI + (Math.PI * j) / 2; // Ponto final no círculo
                        var anticlockwise = i % 2 == 0 ? false : true; // horário ou anti-horário

                        ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);

                        if (i > 1) {
                            ctx.fill();
                        } else {
                            ctx.stroke();
                        }
                    }
                }
                PRE.innerHTML=`${desenha5.toString().slice(8,-73)}`
            }
            const desenha6 = () => {
                ctx.clearRect(0, 0, largura, altura)
                // Exemplo de curvas de Bézier quadráticas
                ctx.beginPath();
                ctx.moveTo(75,25);
                ctx.quadraticCurveTo(25,25,25,62.5);
                ctx.quadraticCurveTo(25,100,50,100);
                ctx.quadraticCurveTo(50,120,30,125);
                ctx.quadraticCurveTo(60,120,65,100);
                ctx.quadraticCurveTo(125,100,125,62.5);
                ctx.quadraticCurveTo(125,25,75,25);
                ctx.stroke();
                PRE.innerHTML=`${desenha6.toString().slice(8,-73)}`
            }
            const desenha7 = () => {
                ctx.clearRect(0, 0, largura, altura)
                // Exemplo de curvas de Bézier cúbicas
                ctx.beginPath();
                ctx.moveTo(75,40);
                ctx.bezierCurveTo(75,37,70,25,50,25);
                ctx.bezierCurveTo(20,25,20,62.5,20,62.5);
                ctx.bezierCurveTo(20,80,40,102,75,120);
                ctx.bezierCurveTo(110,102,130,80,130,62.5);
                ctx.bezierCurveTo(130,62.5,130,25,100,25);
                ctx.bezierCurveTo(85,25,75,37,75,40);
                ctx.fill();
                PRE.innerHTML=`${desenha7.toString().slice(8,-73)}`
            }
            const desenha8 = () => {
                ctx.clearRect(0, 0, largura, altura)
                roundedRect(ctx,12,12,150,150,15);
                roundedRect(ctx,19,19,150,150,9);
                roundedRect(ctx,53,53,49,33,10);
                roundedRect(ctx,53,119,49,16,6);
                roundedRect(ctx,135,53,49,33,10);
                roundedRect(ctx,135,119,25,49,10);

                ctx.beginPath();
                ctx.arc(37,37,13,Math.PI/7,-Math.PI/7,false);
                ctx.lineTo(31,37);
                ctx.fill();

                for(var i=0;i<8;i++){
                ctx.fillRect(51+i*16,35,4,4);
                }

                for(i=0;i<6;i++){
                ctx.fillRect(115,51+i*16,4,4);
                }

                for(i=0;i<8;i++){
                ctx.fillRect(51+i*16,99,4,4);
                }

                ctx.beginPath();
                ctx.moveTo(83,116);
                ctx.lineTo(83,102);
                ctx.bezierCurveTo(83,94,89,88,97,88);
                ctx.bezierCurveTo(105,88,111,94,111,102);
                ctx.lineTo(111,116);
                ctx.lineTo(106.333,111.333);
                ctx.lineTo(101.666,116);
                ctx.lineTo(97,111.333);
                ctx.lineTo(92.333,116);
                ctx.lineTo(87.666,111.333);
                ctx.lineTo(83,116);
                ctx.fill();

                ctx.fillStyle = "white";
                ctx.beginPath();
                ctx.moveTo(91,96);
                ctx.bezierCurveTo(88,96,87,99,87,101);
                ctx.bezierCurveTo(87,103,88,106,91,106);
                ctx.bezierCurveTo(94,106,95,103,95,101);
                ctx.bezierCurveTo(95,99,94,96,91,96);
                ctx.moveTo(103,96);
                ctx.bezierCurveTo(100,96,99,99,99,101);
                ctx.bezierCurveTo(99,103,100,106,103,106);
                ctx.bezierCurveTo(106,106,107,103,107,101);
                ctx.bezierCurveTo(107,99,106,96,103,96);
                ctx.fill();

                ctx.fillStyle = "black";
                ctx.beginPath();
                ctx.arc(101,102,2,0,Math.PI*2,true);
                ctx.fill();

                ctx.beginPath();
                ctx.arc(89,102,2,0,Math.PI*2,true);
                ctx.fill();

                // Uma função útil para desenhar um retângulo com cantos arredondados.

                function roundedRect(ctx,x,y,width,height,radius){
                    ctx.beginPath();
                    ctx.moveTo(x,y+radius);
                    ctx.lineTo(x,y+height-radius);
                    ctx.quadraticCurveTo(x,y+height,x+radius,y+height);
                    ctx.lineTo(x+width-radius,y+height);
                    ctx.quadraticCurveTo(x+width,y+height,x+width,y+height-radius);
                    ctx.lineTo(x+width,y+radius);
                    ctx.quadraticCurveTo(x+width,y,x+width-radius,y);
                    ctx.lineTo(x+radius,y);
                    ctx.quadraticCurveTo(x,y,x,y+radius);
                    ctx.stroke();
                }
                PRE.innerHTML=`${desenha8.toString().slice(8,-73)}`
            }
            const desenha9 = () => {
                ctx.clearRect(0, 0, largura, altura)
                var rectangle = new Path2D();
                rectangle.rect(10, 10, 50, 50);

                var circle = new Path2D();
                circle.moveTo(125, 35);
                circle.arc(100, 35, 25, 0, 2 * Math.PI);

                ctx.stroke(rectangle);
                ctx.fill(circle);
                PRE.innerHTML=`${desenha9.toString().slice(8,-73)}`
            }

            // BODY.addEventListener('load', () => {desenha()}, true)
        </script>
    </main>
</body>

</html>